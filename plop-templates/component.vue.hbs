<template>
	<tm-dialog ref='dialog' width='50%' @save='save' @close='closeModel'>
		<tm-form ref='formRef' :mode='form' :rules='rules'></tm-form>
	</tm-dialog>
</template>
<script lang='ts' setup>
	import type { IModelData } from '{{name}}'

	import formHooks from '/@/hooks/formHooks'
	import dialogHooks from '/@/hooks/dialogHooks'
	import { deepClone } from '/@/utils'
	import { saveData } from '/@/api/{{path}}'


	const dialog = ref < TmDialogInstanceType > (null)
	const formRef = ref < TmFormLayoutInstanceType > (null)

	const { resetFields, validate } = formHooks(formRef)

	const { open, close } = dialogHooks(dialog)

	const emits = defineEmits < {
	(e: 'refresh'): void
}> ()

	const formData = {}
	const form = ref(deepClone(formData))

	//关闭
	const closeModel = () => {
		form.value = deepClone(formData)
		resetFields()
		close()
	}

	//设置数据
	const setForm = (row: any) => {
		nextTick(() => {
			form.value = deepClone(row)
		})
	}

	//保存
	const save = async () => {
		if (await validate()) {
			let res: any = await saveData(data.form)
			if (res) {
				emits('refresh')
				closeModel()
			}
		}
	}

	defineExpose({
		open,
		setForm
	})

	const rules = {
		id: [{ required: true, message: '' }]
	}
</script>