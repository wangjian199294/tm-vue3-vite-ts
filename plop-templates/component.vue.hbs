<template>
  <tm-dialog ref="dialog" width="50%" :loading="data.loading" @save="save" @close="closeModel">
    <tm-form ref="form" :mode="data.form" :rules="rules"></tm-form>
  </tm-dialog>
</template>
<script lang="ts" setup>
  import type { IModelData } from '{{name}}'
  import formHooks from '/@/hooks/formHooks'
  import dialogHooks from '/@/hooks/dialogHooks'
  import { toast } from '/@/utils'

  const emits = defineEmits < {
	(event: 'refresh'): void
}> ()

  const dialog = ref < TmDialogInstanceType > (null)
  const form = ref < TmFormLayoutInstanceType > (null)

  const { resetFields, validate } = formHooks(form)
  const { open, close } = dialogHooks(dialog)

  const formData = {}

  const data = reactive < IModelData > ({
    form: formData, //表单
    loading: false
  })

  //关闭
  const closeModel = () => {
    data.form = formData
    resetFields()
    close()
  }

  //设置数据
  const setForm = (row: any) => {
    nextTick(() => {
      data.form = row
    })
  }

  //保存
  const save = async () => {
    if (await validate()) {
      data.loading = true
      let res: any = await saveApi(data.from)
      if (res) {
        toast('success', res.msg)
        emits('refresh')
        closeModel()
      } else {
        toast('error', res.msg)
      }
    }
  }

  defineExpose({
    open,
    setForm
  })

  const rules = {
    id: [{ required: true, message: '' }]
  }
</script>
<style lang="scss" scoped></style>